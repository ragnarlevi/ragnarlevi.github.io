<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Model on Ragnar</title><link>https://ragnarlevi.github.io/tags/model/</link><description>Recent content in Model on Ragnar</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 11 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ragnarlevi.github.io/tags/model/index.xml" rel="self" type="application/rss+xml"/><item><title>Neural Networks for Insurance Pricing</title><link>https://ragnarlevi.github.io/post/nnfun/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>https://ragnarlevi.github.io/post/nnfun/</guid><description>In this notebook we will be looking at a typicall insurance pricing data set and test GLM and NN models. A typical assumption is that the repsone is poisson: $$ P(Y = y) = \frac{\lambda^y \exp(-\lambda)}{y!}$$ To note a shortcoming of the Poisson distribution is that the mean is equal to the variance, and thus one might use quasi-Poisson or a negative binomial instead. Another shortcoming is that insurance claims are usally zero inflated and thus a zero-inflated poisson model or a hurdle poisson model might be used instead.</description></item><item><title>Generalized Linear Models</title><link>https://ragnarlevi.github.io/post/glm/</link><pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate><guid>https://ragnarlevi.github.io/post/glm/</guid><description>In this notebook, I am going to note down elements of generalized linear models (GLM). GLMs come from the exponential family where a response $y$ has the following distribution $$f(y;\theta) =\exp\Big(\frac{y\theta - b(\theta)}{a(\phi)} + c(y,\theta)\Big)$$ where $\theta$ is the canonical parameter and $\phi$ is the dispersion parameter. Before continuing we define the score and derive the a formula for the expected score and the information.
The score is the derivative of the log-likelihood and we can derive the expected score as, using $f = f(y;\theta)$ :</description></item><item><title>Hidden Markov Models</title><link>https://ragnarlevi.github.io/post/hmm/</link><pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate><guid>https://ragnarlevi.github.io/post/hmm/</guid><description>In this notebook I will be exploring a Hidden Markov Model (HMM) to classify bull and bear states of a simulated financial instrument.
library(depmixS4) library(ggplot2) library(matrixStats) Simulate the data. Assume returns are normally distributed. Where the mean and the standard deviation depends on the state of the financial market. We will only consider 2 states.
set.seed(42) Nk_lower &amp;lt;- 50 Nk_upper &amp;lt;- 150 bull_mean &amp;lt;- 0.1 bull_var &amp;lt;- 0.1 bear_mean &amp;lt;- -0.</description></item></channel></rss>