<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kernel on Ragnar</title><link>https://ragnarlevi.github.io/tags/kernel/</link><description>Recent content in Kernel on Ragnar</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 18 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ragnarlevi.github.io/tags/kernel/index.xml" rel="self" type="application/rss+xml"/><item><title>Gaussian Process Classification</title><link>https://ragnarlevi.github.io/post/gp_fit_algo/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>https://ragnarlevi.github.io/post/gp_fit_algo/</guid><description>In this notebook I will be trying to fit a Gaussian Process classification from scratch on very simple simulated data. I will use the laplacian, expectation propagation, variational inference (which will need some rework) and MH MCMC.
import numpy as np import matplotlib.pyplot as plt from sklearn.metrics.pairwise import rbf_kernel import seaborn as sns from scipy.stats import norm from scipy.optimize import minimize import tqdm Create dataset
x = np.array(list(range(100))) y = np.</description></item><item><title>Dependent Gaussian Processes</title><link>https://ragnarlevi.github.io/post/depgp/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>https://ragnarlevi.github.io/post/depgp/</guid><description>Dependent Gaussian Processes In this workbook, I am going to reproduce the work of Phillip Boyle and Marcus Frean Dependent Gaussian Processes. I will assume that the reader is familiar with the basics of Gaussian Processes
import numpy as np import matplotlib.pyplot as plt import seaborn as sns Consider a device that operates on a continuous, real valuedinput signal overtime $x(t)$ and emits a continuous real valued output $y(t)$. This device is a linear time invariant (LTI) fiter if it is</description></item><item><title>Deep Graph Kernels</title><link>https://ragnarlevi.github.io/post/deepkernel/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><guid>https://ragnarlevi.github.io/post/deepkernel/</guid><description>Deep Graph Kernels In this notebook I will be constructing a deep graph kernel based on this paper. It utilizes the Weisfeiler-Lehman isomorphism test algorithm and/or the shortest-path algorithm. The kernel is then used for graph classification. The code is taken from jcatw which again cites Pinar Yanardag as the original author. The code is adjusted to accommodate the networkx library and python 3.
import networkx as nx import pandas as pd import numpy as np import re from nltk.</description></item></channel></rss>