<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Classification on Ragnar</title><link>https://ragnarlevi.github.io/tags/classification/</link><description>Recent content in Classification on Ragnar</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 18 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ragnarlevi.github.io/tags/classification/index.xml" rel="self" type="application/rss+xml"/><item><title>Gaussian Process Classification</title><link>https://ragnarlevi.github.io/post/gp_fit_algo/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>https://ragnarlevi.github.io/post/gp_fit_algo/</guid><description>In this notebook I will be trying to fit a Gaussian Process classification from scratch on very simple simulated data. I will use the laplacian, expectation propagation, and MH MCMC.
import numpy as np import matplotlib.pyplot as plt from sklearn.metrics.pairwise import rbf_kernel import seaborn as sns from scipy.stats import norm from scipy.optimize import minimize import tqdm Create dataset
x = np.array(list(range(100))) y = np.ones(100) y[(x&amp;gt; 25) &amp;amp; (x&amp;lt;60)] = 0 #plt.</description></item><item><title>Hidden Markov Models</title><link>https://ragnarlevi.github.io/post/hmm/</link><pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate><guid>https://ragnarlevi.github.io/post/hmm/</guid><description>In this notebook I will be exploring a Hidden Markov Model (HMM) to classify bull and bear states of a simulated financial instrument.
library(depmixS4) library(ggplot2) library(matrixStats) Simulate the data. Assume returns are normally distributed. Where the mean and the standard deviation depends on the state of the financial market. We will only consider 2 states.
set.seed(42) Nk_lower &amp;lt;- 50 Nk_upper &amp;lt;- 150 bull_mean &amp;lt;- 0.1 bull_var &amp;lt;- 0.1 bear_mean &amp;lt;- -0.</description></item><item><title>Deep Graph Kernels</title><link>https://ragnarlevi.github.io/post/deepkernel/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><guid>https://ragnarlevi.github.io/post/deepkernel/</guid><description>Deep Graph Kernels In this notebook I will be constructing a deep graph kernel based on this paper. It utilizes the Weisfeiler-Lehman isomorphism test algorithm and/or the shortest-path algorithm. The kernel is then used for graph classification. The code is taken from jcatw which again cites Pinar Yanardag as the original author. The code is adjusted to accommodate the networkx library and python 3.
import networkx as nx import pandas as pd import numpy as np import re from nltk.</description></item></channel></rss>